# Script to receive a TTS on a Google Home on which you just asked a question
# for more details: https://community.home-assistant.io/t/script-to-send-tts-to-the-right-google-home-based-on-voice-commands/346885
#
google_home_voice:
  alias: "00 ðŸ”Š TTS for Google Home based on voice command"
  icon: mdi:cast-audio
  mode: single
  max_exceeded: silent
  variables:
    check_for_title: "Witte ruis"
    speaker_groups:
      - media_player.huis_groep
      - media_player.boven_groep
      - media_player.beneden_groep
      - media_player.zolder_groep
    primary_spotcast: pepijn
  sequence:
    - variables:
        version: 1.0.0
        service_calls: >
          {%- set ns = namespace(service = []) %}
          {%- for item in action %}
            {%- if item.get('service', 'uhoh') != 'uhoh' %}
              {%- set ns.service = ns.service + [ item ] %}
            {%- endif %}
          {%- endfor %}
          {{ ns.service }}
        no_service_count: >
          {{ action | reject('in', service_calls) | list | count }}
        entity_list: >
          {%- set devices = states | map(attribute='entity_id') | map('device_id') | unique | reject('eq',None) | list %}
          {%- set ns = namespace(entities = []) %}
          {%- for device in devices %}
            {%- set ids = device_attr(device, 'identifiers') %}
            {%- set ids = device_attr(device, 'identifiers') | list | first if ids else [] %}
            {%- if ids and ids | length == 2 and ids[0] == 'cast' %}
              {%- set ns.entities = ns.entities + device_entities(device) %}
            {%- endif %}
          {%- endfor %}
          {{ 
            (ns.entities + speaker_groups)
            if speaker_groups is defined and speaker_groups
            else ns.entities
          }}
        entity_playing: >
          {{ 
            expand(entity_list) | selectattr('state', 'eq', 'playing') 
                                | map(attribute='entity_id') 
                                | list 
          }}
        media_player_data: >
          {%- set entities = expand(entity_playing) %}
          {%- set ns = namespace(info=[]) %}
          {%- for entity in entities %}
            {%- set ns.info = ns.info +  [ 
                                          dict(
                                            entity_id = entity.entity_id,
                                            friendly_name = entity.attributes.friendly_name,
                                            media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                            media_title = entity.attributes.get('media_title', 'no title'),
                                            media_artist = entity.attributes.get('media_artist', 'no artist'),
                                            media_content_type = entity.attributes.get('media_content_type', 'no type'),
                                            app_name = entity.attributes.get('app_name', 'no app'),
                                            entity_picture = entity.attributes.get('entity_picture', 'no pic'),
                                            volume_level = entity.attributes.get('volume_level', 0.25) | round(2)
                                            )
                                        ] 
            %}
          {%- endfor %}
          {{ ns.info }}
        spotify_data: >
          {%- set ns = namespace(spotify=[]) %}
          {%- 
            for entity in states.media_player 
                            | selectattr('entity_id', 'search', 'spotify')
                            | selectattr('state', 'eq', 'playing')
          %}
            {%- set ns.spotify = ns.spotify +  [ 
                                                  dict(
                                                    entity_id = entity.entity_id,
                                                    source = entity.attributes.source
                                                    )
                                                ] 
            %}
          {%- endfor %}
          {{ ns.spotify }}
    - alias: "Send log message about wrong actions"
      choose:
        - conditions: "{{ service_calls | count == 0 or no_service_count > 0 }}"
          sequence:
            service: system_log.write
            data:
              level: "{{ iif(service_calls | count == 0, 'error', 'warning') }}"
              logger: "{{ this.entity_id }}"
              message: >
                {%- if service_calls | count == 0 %}
                  There were no service calls defined, no actions are performed.
                  The script has been aborted
                {%- elif no_service_count == 1 %}
                  You added an action which is not a service call to the Google
                  Cast Resume script. This action was ignored.
                {%- else %}
                  You added {{ no_service_count }} actions which are not service calls 
                  to the Google Cast Resume script. These were ignored.
                {%- endif %}
    - alias: "Wait until white noise started"
      wait_template: >
        {{ 
          expand(states.media_player)
            | selectattr('attributes.media_title', 'eq', check_for_title)
            | map(attribute='entity_id')
            | list
            | count > 0
        }}
    - variables:
        target: >
          {{ 
            expand(states.media_player)
              | selectattr('attributes.media_title', 'eq', check_for_title)
              | map(attribute='entity_id') 
              | list
          }}
    - alias: "No service actions"
      choose:
        - conditions: "{{ service_calls | count != 0 }}"
          sequence:
            - alias: "Stop ambient sound"
              service: media_player.media_stop
              target:
                entity_id: "{{ target }}"
    - alias: "Are there any service calls to perform"
      condition: template
      value_template: "{{ service_calls | count != 0 }}"
    - alias: "Send actions using Google Home Resume script"
      service: script.turn_on
      target:
        entity_id: script.google_home_resume
      data:
        variables:
          voice_target: "{{ target }}"
          voice_media_player_data: "{{ media_player_data | selectattr('entity_id', 'eq', target[0] ) | list }}"
          voice_groups: >
            {{ 
              entity_playing | select('in', speaker_groups) | list 
              if speakers_groups is defined and speaker_groups 
              else [] 
            }}
          voice_spotcast: >
            {%- set friendly_name = state_attr(target[0], 'friendly_name') %}
            {%- set spotify_entity = spotify_data | selectattr('source', 'eq', friendly_name) | map(attribute='entity_id') | join %}
            {{ 
              spotify_entity.replace('media_player.spotify_', '')
              if spotify_entity
              else (primary_spotcast if primary_spotcast is defined and primary_spotcast else '')
            }}
          action: >
            {%- set ns = namespace(action=[]) %}
            {%- for item in service_calls %}
              {%- set ns.action = ns.action + [
                                                dict(
                                                  service = item.service,
                                                  target = { 'entity_id' : target},
                                                  data = item.get('data', {})
                                                  )
                                              ] 
              %}
            {%- endfor %}
            {{ ns.action }}
    - alias: "TTS volume defined"
      choose:
        - conditions: "{{ iif(volume) }}"
          sequence:
            - alias: "Wait first target is idle or off (will prevent volume change of stream in case there is only one target)"
              wait_template: "{{ states(target[0]) in ['idle', 'off'] }}"
            - alias: "Apply TTS volume"
              service: media_player.volume_set
              target:
                entity_id: "{{ target }}"
              data:
                volume_level: >
                  {{ [1, volume if volume <= 1 else volume / 100] | min }}
