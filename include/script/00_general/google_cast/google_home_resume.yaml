# Script to resume streams on Google Home speakes after it has been interrupted by service calls
# Supports resuming of Spotify and online streams (like TuneIn)
# for more details: https://github.com/TheFes/HA-configuration/blob/main/include/script/00_general/google_cast/docs/google_home_resume.md
#
google_home_resume:
  alias: "00 ðŸ”Š Google Home Resume"
  description: Script for resuming Google Home speakers
  icon: mdi:cast-audio
  mode: parallel
  fields:
    target:
      description: "Enter the targets in case they are not clear from the service calls"
      required: false
      selector:
        target:
          entity:
            integration: cast
            domain: media_player
          device:
            integration: cast
    action:
      description: "Actions to be performed (only service calls will work)"
      required: true
      selector:
        action:
    resume_this_action:
      description: "Set to false if you don't want to resume the actions started with this script (default is true)"
      required: false
      selector:
        boolean:
  variables:
    players_screen:
      - media_player.keuken_hub
      - media_player.slaapkamer_hub
      - media_player.shield
    primary_spotcast: "pepijn"
    fixed_picture:
      NPO Radio 2: "/local/pictures/radio/npo_radio_2.png"
      Radio Veronica: "/local/pictures/radio/radio_veronica.png"
    speaker_groups:
      media_player.huis_groep:
        - media_player.keuken_hub
        - media_player.slaapkamer_hub
        - media_player.pepijn_mini
        - media_player.woonkamer_mini
        - media_player.zolder_mini_marleen
        - media_player.zolder_mini_martijn
        - media_player.floris_mini
      media_player.boven_groep:
        - media_player.pepijn_mini
        - media_player.slaapkamer_hub
        - media_player.zolder_mini_marleen
        - media_player.zolder_mini_martijn
        - media_player.floris_mini
      media_player.beneden_groep:
        - media_player.keuken_hub
        - media_player.woonkamer_mini
      media_player.zolder_groep:
        - media_player.zolder_mini_marleen
        - media_player.zolder_mini_martijn
    default_volume_level: 0.25
  sequence:
    - alias: "Version number"
      variables:
        version: 1.2.1
    - alias: "Dynamic groups"
      variables:
        groups:
          - group.resume_active
          - group.resume_script_active
          - group.resume_action_false
    - alias: "Failsafe to remove all groups if the script was not running"
      choose:
        - conditions: >
            {{ 
              state_attr(this.entity_id, 'current') == 1
              and integration_entities('group')
                | select('in', groups)
                | list
                | count > 0
            }}
          sequence:
            - alias: "Remove groups"
              repeat:
                count: >
                  {{ 
                    integration_entities('group') 
                      | select('in', groups) 
                      | list 
                      | count
                  }}
                sequence:
                  - alias: "Remove resume_script_active"
                    service: group.remove
                    data:
                      object_id: >
                        {%- set existing = integration_entities('group')
                                            | select('in', groups)
                                            | list
                        %}
                        {{ states[existing[0]].object_id }}
    - alias: "Set variables to be used in the script"
      variables:
        start_time: "{{ now() }}"
        speaker_group_list: "{{ speaker_groups.keys() | list if (speaker_groups is defined and speaker_groups) else [] }}"
        service_calls: >
          {%- set ns = namespace(service = []) %}
          {%- for item in action %}
            {%- if item.get('service', 'uhoh') != 'uhoh' %}
              {%- set ns.service = ns.service + [ item ] %}
            {%- endif %}
          {%- endfor %}
          {{ ns.service }}
        no_service_count: >
          {{ action | reject('in', service_calls) | list | count }}
        target_list: >
          {# determine entities of cast integraton #}
            {%- set cast_entities = integration_entities('cast') %}
          {# create target lists #}
          {%- if target is defined %}
            {# create lists based on target input #}
              {%- set area_list = target.area_id.replace(' ' , '').split(',') if target.area_id is string else target.area_id %}
              {%- set device_list = target.device_id.replace(' ' , '').split(',') if target.device_id is string else target.device_id %}
              {%- set entity_list = target.entity_id.replace(' ' , '').split(',') if target.entity_id is string else target.entity_id %}
          {%- endif %}
          {# determine targets based on actions #}
            {%- set ns = namespace(entity = [], device = [], area = [] ) %}
            {%- for item in service_calls %}
              {%- set entity_s = item.get('entity_id', []) %}
              {%- set device_s = item.get('device_id', []) %}
              {%- set area_s = item.get('area_id', []) %}
              {%- if item.target is defined %}
                {%- set entity = item.target.get('entity_id', []) %}
                {%- set entity = entity.replace(' ','').split(',') if entity is string else entity %}
                {%- set device = item.target.get('device_id', []) %}
                {%- set device = device.replace(' ','').split(',') if device is string else device %}
                {%- set area = item.target.get('area_id', []) %}
                {%- set area = area.replace(' ','').split(',') if area is string else area %}
              {%- else %}
                {%- if item.data is defined %}
                  {%- set entity_d = item.data.get('entity_id', []) %}
                  {%- set entity_d = entity_d.replace(' ','').split(',') if entity_d is string else entity_d %}
                  {%- set device_d = item.data.get('device_id', []) %}
                  {%- set device_d = device_d.replace(' ','').split(',') if device_d is string else device_d %}
                  {%- set area_d = item.data.get('area_id', []) %}
                  {%- set area_d = area_d.replace(' ','').split(',') if area_d is string else area_d %}
                {%- endif %}
                {%- set entity = item.get('entity_id', []) %}
                {%- set entity = entity.replace(' ','').split(',') if entity is string else entity %}
                {%- set entity = entity + (entity_d if entity_d is defined else []) %}
                {%- set device = item.get('device_id', []) %}
                {%- set device = device.replace(' ','').split(',') if device is string else device %}
                {%- set device = device + (device_d if device_d is defined else []) %}
                {%- set area = item.get('area_id', []) %}
                {%- set area = area.replace(' ','').split(',') if area is string else area %}
                {%- set area = area + (area_d if area_d is defined else []) %}
              {%- endif %}
                {%- set ns.entity = entity + ns.entity %}
                {%- set ns.device = device + ns.device%}
                {%- set ns.area = area + ns.area %}
            {%- endfor %}
            {%- set area_list = ns.area + (area_list if area_list is defined else []) %}
            {%- set device_list = ns.device + (device_list if device_list is defined else []) %}
            {%- set entity_list = ns.entity + (entity_list if entity_list is defined else []) %}
          {# create entity list based on device/area input #}
            {# determine cast entities of areas #}
              {%- set ns = namespace(area_cast = []) %}
              {%- for area in area_list %}
                {%- set ns.area_cast = ns.area_cast + area_entities(area) | select('in', cast_entities) | list %}
              {%- endfor %}
              {%- set area_cast = ns.area_cast %}
            {# determine cast entities of devices #}
              {%- set ns = namespace(device_cast = []) %}
              {%- for device in device_list %}
                {%- set ns.device_cast = ns.device_cast + device_entities(device) | select('in', cast_entities) | list %}
              {%- endfor %}
              {%- set device_cast = ns.device_cast %}
            {# determine cast entities of all entities #}
              {%- set entity_cast = entity_list | select('in', cast_entities) | list %}
          {# create list with all entities #}
            {%- set total_list = (area_cast + device_cast + entity_cast) | unique | list %}
          {# avoid to target both complete speaker groups and single members #}
            {%- set target_group =  total_list | select('in', speaker_group_list) | list %}
            {%- set target_single = total_list | reject('in', speaker_group_list) | list %}
            {%- set ns = namespace(groupmembers = []) %}
            {%- for group in target_group %}
              {%- set ns.groupmembers = ns.groupmembers + speaker_groups[group] %}
            {%- endfor %}
            {%- 
              set single_not_in_group = target_single 
                | reject('in', ns.groupmembers | unique | list)
                | list
            %}
            {{ target_group + single_not_in_group }}
        player_data: >
          {%- if voice_player_data is defined %}
            {{ voice_player_data }}
          {%- else %}
            {%- set ns = namespace(info=[]) %}
            {%- for entity in expand(integration_entities('cast')) %}
              {%- set ns.info = ns.info + [
                                            dict(
                                              entity_id = entity.entity_id,
                                              friendly_name = entity.attributes.friendly_name,
                                              state = entity.state,
                                              media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                              media_title = entity.attributes.get('media_title', 'no title'),
                                              media_artist = entity.attributes.get('media_artist', 'no artist'),
                                              media_content_type = entity.attributes.get('media_content_type', 'no type'),
                                              app_name = entity.attributes.get('app_name', 'no app'),
                                              entity_picture = entity.attributes.get('entity_picture', 'no pic'),
                                              volume_level = entity.attributes.get('volume_level', 'NA') | round(2, default='no volume'),
                                              media_position = (
                                                                  now() - entity.attributes.get('media_position_updated_at', now())
                                                                  + timedelta(seconds=entity.attributes.get('media_position', 0))
                                                                ).seconds
                                              )
                                            ] 
              %}
            {%- endfor %}
            {{ ns.info }}
          {%- endif %}
        players_to_resume: >
          {# set variables based on dynamic groups created by script #}
            {%- set resume_active = state_attr('group.resume_active', 'entity_id') %}
            {%- set resume_active = iif(resume_active, resume_active, []) %}
            {%- set resume_action_false = state_attr('group.resume_action_false', 'entity_id') %}
            {%- set resume_action_false = iif(resume_action_false, resume_action_false, []) %}
          {# determine which media_players are playing and store attributes#}
            {%- 
              set all_players_playing = player_data
                                          | selectattr('state', 'eq', 'playing') 
                                          | map(attribute='entity_id') 
                                          | list  
            %}
          {# determine which Google Home speakers groups are playing #}
            {%- 
              set all_speaker_groups_playing = all_players_playing
                                                  | select('in', speaker_group_list)
                                                  | list
            %}
          {# determine which of the targets (including groups members) are playing #}
            {%- set ns = namespace(targets = []) %}
              {%- for target in target_list %}
                {%- set ns.targets = ns.targets +  (
                                                      speaker_groups[target]
                                                      if target in speaker_group_list
                                                      else [ target ]
                                                    )
                %}
              {%- endfor %}
            {%- set target_playing = ns.targets | select('in', all_players_playing) | list %}
          {# determine which groups should be resumed becaue a single target is part of that group #}
            {%- set ns = namespace(groups = []) %}
              {%- for group in all_speaker_groups_playing %}
                {%- for entity in speaker_groups[group] if entity in target_playing %}
                  {%- set ns.groups = ns.groups + [group] %}
                {%- endfor %}
              {%- endfor %}
            {%- set speaker_groups_resume = ns.groups | unique | list %}
          {# determine which single entities are in a group which is going to be resumed #}
            {%- set ns = namespace(to_reject = []) %}
            {%- for group in speaker_groups_resume %}
              {%- set ns.to_reject = ns.to_reject + speaker_groups[group] %}
            {%- endfor %}
            {%- set reject_list = ns.to_reject %}
          {# determine which single playing entities are in a group which is a target #}
            {%- set target_group = target_list | select('in', speaker_group_list) | reject('in', all_speaker_groups_playing) |list %}
            {%- set ns = namespace(single_resume = []) %}
            {%- for group in target_group %}
              {%- set ns.single_resume = ns.single_resume + speaker_groups[group] | select('in', all_players_playing) | list %}
            {%- endfor %}
            {%- set single_resume_list = ns.single_resume %}
          {# combine all the above to a list of players which should be resumed #}
            {{ 
              (target_playing + speaker_groups_resume + single_resume_list)
                | reject('in', reject_list)
                | reject('in', resume_active)
                | reject('in', resume_action_false)
                | unique
                | list
            }}
        target_not_playing: >
          {%- 
            set playing = player_data
              | rejectattr('state', 'eq', 'playing')
              | map(attribute='entity_id')
              | list 
          %}
          {%- set targets_not_playing = target_list | reject('in', playing) | list %}
          {%- set ns = namespace(members = []) %}
          {%- for target in targets_not_playing %}
            {%- if target in speaker_group_list %}
              {%- set ns.members = ns.members + speaker_groups[target] %}
            {%- endif %}
          {%- endfor %}
          {{ targets_not_playing + ns.members | reject('in', speaker_group_list) | list }}
        spotify_players_info: >
          {%- if voice_spotify is defined %}
            {{ voice_spotify }}
          {%- else %}
            {%- set entities = expand(integration_entities('spotify')) %}
            {%- set ns = namespace(info=[]) %}
            {%- for entity in entities %}
              {%- set ns.info = ns.info + [ dict(entity_id=entity.entity_id, source=entity.attributes.source) ] %}
            {%- endfor %}
            {{ ns.info }}
          {%- endif %}
        ytube_music_players: >
          {%- if voice_ytube_info is defined %}
            {{ 
              voice_ytube_info
                | selectattr('target', 'in', players_to_resume)
                | map(attribute='player')
                | list 
            }}
          {%- else %}
            {%- set current = state_attr('group.resume_active', 'entity_id') %}
            {%- set current = [] if current == none else current | list %}
            {{
              expand(integration_entities('ytube_music_player'))
                | selectattr('state', 'eq', 'playing')
                | selectattr('attributes.remote_player_id', 'in', players_to_resume + current)
                | map(attribute='entity_id')
                | list 
            }}
          {%- endif %}
        ytube_music_targets: >
          {%- if voice_ytube_info is defined %}
            {{ 
              voice_ytube_info
                | selectattr('target', 'in', players_to_resume)
                | map(attribute='target')
                | list 
            }}
          {%- else %}
            {{
              expand(ytube_music_players)
                | map(attribute='attributes.remote_player_id')
                | list 
            }}
          {%- endif %}
    - alias: "Resume ytube players which are not a target"
      choose:
        - conditions: >
            {{ 
              (
                voice_ytube_info
                  | rejectattr('target', 'in', players_to_resume)
                  | map(attribute='target')
                  | list
                  | count > 0
              )
              if voice_ytube_info is defined
              else false
            }}
          sequence:
            - service: ytube_music_player.call_method
              data:
                entity_id: >
                  {{ 
                    voice_ytube_info
                      | rejectattr('target', 'in', players_to_resume)
                      | map(attribute='target')
                      | list
                  }}
                command: interrupt_resume
    - alias: "Send log message about wrong actions"
      choose:
        - conditions: "{{ service_calls | count == 0 or no_service_count > 0 }}"
          sequence:
            service: system_log.write
            data:
              level: "{{ iif(service_calls | count == 0, 'error', 'warning') }}"
              logger: "{{ this.entity_id }}"
              message: >
                {%- if service_calls | count == 0 %}
                  There were no service calls defined, no actions are performed.
                  The {{ this.attributes.friendly_name }} script has been aborted
                {%- elif no_service_count == 1 %}
                  You added an action which is not a service call to the 
                  {{ this.attributes.friendly_name }} script. This action was ignored.
                {%- else %}
                  You added {{ no_service_count }} actions which are not service calls 
                  to the {{ this.attributes.friendly_name }} script. These were ignored.
                {%- endif %}
    - alias: "Are there any service calls to perform"
      condition: template
      value_template: "{{ service_calls | count != 0 }}"
    - alias: "Create group with entities for which the script is active"
      service: group.set
      data:
        object_id: resume_script_active
        name: "Entities currently active with Google Home Resume script"
        icon: mdi:play-box
        entities: >
          {%- set current = state_attr('group.resume_script_active', 'entity_id') %}
          {%- set current = [] if current == none else current | list %}
          {{ 
              ( current + target_list) | list
          }}
    - alias: "Create group with entities which will resume"
      service: group.set
      data:
        object_id: resume_active
        name: "Entities which will be resumed by the Google Home Resume script"
        icon: mdi:autorenew
        entities: >
          {%- set current = state_attr('group.resume_active', 'entity_id') %}
          {%- set current = [] if current == none else current | list %}
          {{ 
              ( current + players_to_resume + ytube_music_players ) | unique | list
          }}
    - alias: "Turn non playing entities on if needed"
      choose:
        - conditions: "{{ target_not_playing | count > 0 }}"
          sequence:
            - alias: "Turn non playing entities on"
              service: media_player.turn_on
              target:
                entity_id: >
                  {{ target_not_playing }}
            - delay: 0.25
    - variables:
        volume_old_not_playing: >
          {%- set entities = expand(target_not_playing) %}
          {%- set ns = namespace(info=[]) %}
          {%- set volume = default_volume_level | default(0.25) %}
          {%- set volume_restore = volume if volume < 1 else [1, volume / 100] | min %}
          {%- for entity in entities %}
            {%- set ns.info = ns.info +  [
                                        dict(
                                          entity_id = entity.entity_id, 
                                          volume_level = entity.attributes.volume_level | default(
                                                                                                    volume_restore
                                                                                                  ) | round(2)
                                          ) 
                                        ] 
            %}
          {%- endfor %}
          {{ ns.info }}
        screen_not_playing: >
          {{
            target_not_playing | select('in', players_screen) | list 
            if (players_scren is defined and players_screen) 
            else [] 
          }}
    - alias: "Interrupt YouTube music if needed"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: >
                {{
                  not voice_ytube_info is defined
                  and ytube_music_players | count > 0
                }}
          sequence:
            - service: ytube_music_player.call_method
              data:
                entity_id: "{{ ytube_music_players }}"
                command: interrupt_start
    - alias: "Create group for resume_this_action setting"
      choose:
        - conditions: "{{ iif(resume_this_action is defined and resume_this_action,false,true) }}"
          sequence:
            - alias: "Create group entities with resume_this_action to false"
              service: group.set
              data:
                object_id: resume_action_false
                name: "Entities with actions which should not be resumed"
                icon: mdi:alert-octagon
                entities: >
                  {%- set current = state_attr('group.resume_action_false', 'entity_id') %}
                  {%- set current = [] if current == none else current | list %}
                  {%- set to_add = target_list | list %}
                  {{ 
                      ( current + to_add) | unique | list 
                  }}
    - alias: "Perform service calls defined in action"
      repeat:
        count: "{{ service_calls | count }}"
        sequence:
          - service: "{{ service_calls[repeat.index -1].service }}"
            target: "{{ service_calls[repeat.index -1].get('target', {}) }}"
            data: "{{ service_calls[repeat.index -1].get('data', {}) }}"
    - alias: "Short delay"
      delay: 4
    - alias: "Add entities to resume_action_false group"
      choose:
        - conditions: "{{ iif(resume_this_action is defined and resume_this_action,false,true) }}"
          sequence:
            - alias: "Create group entities with resume_this_action to false"
              service: group.set
              data:
                object_id: resume_action_false
                name: "Entities with actions which should not be resumed"
                icon: mdi:alert-octagon
                entities: >
                  {%- set current = state_attr('group.resume_action_false', 'entity_id') %}
                  {%- set current = [] if current == none else current | list %}
                  {{ 
                      ( current + target_list ) | unique | list 
                  }}
    - alias: "Anything to resume?"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: "{{ players_to_resume | count > 0 }}"
          sequence:
            - alias: "Resume players"
              repeat:
                count: "{{ players_to_resume | count }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      player: >
                        {{ 
                          player_data 
                            | selectattr('entity_id', 'eq', players_to_resume[repeat.index - 1])
                            | join
                        }}
                      spotify: >
                        {{ player.app_name == 'Spotify' }}
                      youtube: >
                        {{ player.app_name in ['YouTube', 'YouTube Music'] }}
                      stream: >
                        {{ 
                          (player.media_content_id).startswith('http')
                          and not player.entity_id in ytube_music_targets
                        }}
                      spotcast_account: >
                        {%- if player.app_name != 'Spotify' %}
                          {%- set spotcast = 'Not Spotify' %}
                        {%- else %}
                          {%- set entity = player.entity_id %}
                          {%- if speaker_group_list != [] and speaker_groups[entity] %}
                            {%- set members = speaker_groups[entity] %}
                          {%- else %}
                            {%- set members = [] %}
                          {%- endif %}
                          {%- set list_check = [ player.entity_id ] + members %}
                          {%- set names_check = expand(list_check) | map(attribute='name') | list %}
                            {%- set spotcast =  spotify_players_info
                                                | selectattr('source', 'in', names_check) 
                                                | map(attribute='entity_id') 
                                                | join 
                                                | replace('media_player.spotify_', '')
                                
                            %}
                        {%- endif %}
                          {{ spotcast if spotcast else primary_spotcast }}
                  - alias: "Resume needed?"
                    choose:
                      - conditions:
                          - alias: "State changed since script started?"
                            condition: template
                            value_template: "{{ states[player.entity_id].last_changed > as_datetime(start_time) }}"
                        sequence:
                          - alias: "Wait until player is idle again, and all other scripts are finished"
                            wait_template: >
                              {%- set current = state_attr('group.resume_script_active', 'entity_id') %}
                              {%- set current = [] if current == none else current | list %}
                              {{ 
                                states(player.entity_id) in ['idle', 'off']
                                and current | select('eq', player.entity_id) | list | count <= 1
                              }}
                          - alias: "Set volume to old volume if needed"
                            choose:
                              - conditions:
                                  - alias: "Volume restore needed"
                                    condition: template
                                    value_template: >
                                      {{
                                        player.volume_level | round(2, default=0) 
                                        != state_attr(player.entity_id, 'volume_level') | round(2, default=0)
                                      }}
                                sequence:
                                  - alias: "Player is group?"
                                    choose:
                                      - conditions: "{{ player.entity_id in speaker_group_list }}"
                                        sequence:
                                          - variables:
                                              members: "{{ speaker_groups[player.entity_id] }}"
                                          - alias: "Restore volume of members"
                                            repeat:
                                              count: "{{ members | count }}"
                                              sequence:
                                                - alias: "Set volume back to old state"
                                                  service: media_player.volume_set
                                                  target:
                                                    entity_id: "{{ members[repeat.index -1] }}"
                                                  data:
                                                    volume_level: >
                                                      {{ 
                                                        player_data
                                                          | selectattr('entity_id', 'eq', members[repeat.index-1])
                                                          | map(attribute='volume_level')
                                                          | join
                                                          | round(2, default=default_volume_level)
                                                      }}
                                    default:
                                      - alias: "Set volume back to old state"
                                        service: media_player.volume_set
                                        target:
                                          entity_id: "{{ player.entity_id }}"
                                        data:
                                          volume_level: "{{ player.volume_level | round(2, default=default_volume_level) }}"
                          - alias: "Resume playing"
                            choose:
                              - alias: "YouTube?"
                                conditions: "{{ youtube and player.entity_in in players_screen }}"
                                sequence:
                                  - alias: "Play video"
                                    service: media_player.play_media
                                    target:
                                      entity_id: "{{ player.entity_id }}"
                                    data:
                                      media_content_type: cast
                                      media_content_id: '
                                        {
                                        "app_name": "youtube",
                                        "media_id": "{{ player.media_content_id }}"
                                        }'
                                  - alias: "Wait until video is playing"
                                    wait_template: >
                                      {{ 
                                        is_state_attr(player.entity_id, 'media_content_id', player.media_content_id)
                                        and iif(state_attr(player.entity_id, 'media_position')) 
                                      }}
                                  - alias: "Seek"
                                    service: media_player.media_seek
                                    target:
                                      entity_id: "{{ player.entity_id }}"
                                    data:
                                      seek_position: >
                                        {{ [0, player.media_position - 3] | max }}
                              - alias: "Spotify?"
                                conditions: "{{ spotify }}"
                                sequence:
                                  - alias: "Primary spotcast account?"
                                    choose:
                                      - conditions: "{{ spotcast_account == primary_spotcast }}"
                                        sequence:
                                          - alias: "Resume spotify with primary spotcast account"
                                            service: spotcast.start
                                            data:
                                              entity_id: "{{ player.entity_id }}"
                                              force_playback: true
                                    default:
                                      - alias: "Resume spotify with specific account"
                                        service: spotcast.start
                                        data:
                                          entity_id: "{{ player.entity_id }}"
                                          account: "{{ spotcast_account }}"
                                          force_playback: true
                              - alias: "Stream?"
                                conditions: "{{ stream }}"
                                sequence:
                                  - alias: "Resume stream"
                                    service: media_player.play_media
                                    target:
                                      entity_id: "{{ player.entity_id }}"
                                    data:
                                      media_content_id: >
                                        {{ player.media_content_id }}
                                      media_content_type: "music"
                                      extra: >
                                        {%- if fixed_picture is defined and fixed_picture %}
                                          {%- if player.media_artist in fixed_picture %}
                                            {%- set p = fixed_picture[player.media_artist] %}
                                          {%- elif player.media_title in fixed_picture %}
                                            {%- set p = fixed_picture[player.media_title] %}
                                          {%- else %}
                                            {%- set p = player.entity_picture %}
                                          {%- endif %}
                                        {%- else %}
                                          {%- set p = player.entity_picture %}
                                        {%- endif %}
                                        {%- set t = iif(player.app_name.startswith('TuneIn'), player.media_artist, player.media_title) %}
                                        {{ iif(p == 'no pic', dict(title = t), dict(title = t, thumb = p)) }}
                  - alias: "Remove entity from group"
                    service: group.set
                    data:
                      object_id: resume_action_false
                      name: "Entities with actions which should not be resumed"
                      icon: mdi:alert-octagon
                      entities: >
                        {%- set current = state_attr('group.resume_action_false', 'entity_id') %}
                        {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}
                  - alias: "Remove entity from group"
                    service: group.set
                    data:
                      object_id: resume_active
                      name: "Entities currently active with Google Home Resume script"
                      icon: mdi:autorenew
                      entities: >
                        {%- set current = state_attr('group.resume_active', 'entity_id') %}
                        {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}
    - alias: "Resume YouTube music if needed"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: "{{ ytube_music_players | count > 0 }}"
          sequence:
            - service: ytube_music_player.call_method
              data:
                entity_id: "{{ ytube_music_players }}"
                command: interrupt_resume
            - alias: "Remove entity from group"
              service: group.set
              data:
                object_id: resume_active
                name: "Entities currently active with Google Home Resume script"
                icon: mdi:autorenew
                entities: >
                  {%- set current = state_attr('group.resume_active', 'entity_id') %}
                  {{ iif(current == none, [], current) | reject('in', ytube_music_players) | list }}
    - alias: "Restore volume of non playing entities"
      choose:
        - conditions:
            - alias: "Restore required?"
              condition: template
              value_template: >
                {{ 
                  target_not_playing | count > 0 
                }}
          sequence:
            - alias: "Adjust volume"
              repeat:
                count: "{{ volume_old_not_playing | count }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      player: "{{ volume_old_not_playing[repeat.index -1] }}"
                  - alias: "Wait until entity is idle or off"
                    wait_template: "{{ states(player.entity_id) in ['idle', 'off'] }}"
                  - alias: "Set volume to old volume if needed"
                    choose:
                      - conditions:
                          - alias: "Volume restore needed"
                            condition: template
                            value_template: >
                              {{
                                player.volume_level | round(2, default=0) 
                                != state_attr(player.entity_id, 'volume_level') | round(2, default=0)
                              }}
                        sequence:
                          - alias: "Set volume back to old state"
                            service: media_player.volume_set
                            target:
                              entity_id: "{{ player.entity_id }}"
                            data:
                              volume_level: >
                                {{ player.volume_level | float(default=default_volume_level | default(0.25)) | round(2) }}
    - alias: "Google Home with screen back to idle screen"
      choose:
        - conditions: "{{ screen_not_playing | count > 0 }}"
          sequence:
            - alias: "Restore default screen"
              repeat:
                count: "{{ screen_not_playing | count }}"
                sequence:
                  - variables:
                      player: "{{ screen_not_playing[repeat.index -1] }}"
                  - alias: "Wait until player is idle or off"
                    wait_template: "{{ states(player) in ['idle', 'off'] }}"
                  - alias: "Turn Google Home on to return to idle mode (photo display)"
                    service: media_player.turn_on
                    target:
                      entity_id: "{{ player }}"
    - alias: "Google Home with screen back to idle screen"
      choose:
        - conditions: "{{ screen_not_playing | count > 0 }}"
          sequence:
            - alias: "Restore default screen"
              repeat:
                count: "{{ screen_not_playing | count }}"
                sequence:
                  - variables:
                      player: "{{ screen_not_playing[repeat.index -1] }}"
                  - alias: "Wait until player is idle or off"
                    wait_template: "{{ states(player) in ['idle', 'off'] }}"
                  - alias: "Turn Google Home on to return to idle mode (photo display)"
                    service: media_player.turn_on
                    target:
                      entity_id: "{{ player }}"
    - alias: "Remove all targets from group"
      choose:
        - conditions: "{{ iif(resume_this_action is defined and resume_this_action,false,true) }}"
          sequence:
            - alias: "Remove from group"
              repeat:
                count: "{{ target_list | count }}"
                sequence:
                  - variables:
                      player: "{{ target_list[repeat.index -1] }}"
                  - alias: "Wait until player is idle or off"
                    wait_template: "{{ states(player) in ['idle', 'off'] }}"
                  - alias: "Remove entity from group"
                    service: group.set
                    data:
                      object_id: resume_action_false
                      name: "Entities with actions which should not be resumed"
                      icon: mdi:alert-octagon
                      entities: >
                        {%- set current = state_attr('group.resume_action_false', 'entity_id') %}
                        {{ iif(current == none, [], current) | reject('eq', target_list[repeat.index-1]) | list }}
    - alias: "Remove entities from group"
      repeat:
        count: "{{ target_list | count }}"
        sequence:
          - variables:
              current: >
                {%- set current = state_attr('group.resume_script_active', 'entity_id') %}
                {{ [] if current == none else current | list }}
              other: >
                {{ current | reject('eq', target_list[repeat.index -1]) | list  }}
              target_count: >
                {{ current | select('eq', target_list[repeat.index -1]) | list | count }}
          - alias: "Remove entity from group"
            service: group.set
            data:
              object_id: resume_script_active
              name: "Entities currently active with Google Home Resume script"
              icon: mdi:autorenew
              entities: >
                {{ other }}
          - alias: "Add the right number of entities back to the group"
            choose:
              - conditions: "{{ target_count > 1 }}"
                sequence:
                  - alias: "Re-add entity"
                    repeat:
                      count: "{{ target_count - 1 }}"
                      sequence:
                        - alias: "Re-add entity from group"
                          service: group.set
                          data:
                            object_id: resume_script_active
                            name: "Entities currently active with Google Home Resume script"
                            icon: mdi:autorenew
                            entities: >
                              {{ other + [ target_list[repeat.index -1] ] }}
    - alias: "Remove all existing groups if this is the last script running"
      choose:
        - conditions: >
            {{ 
              state_attr(this.entity_id, 'current') == 1
              and integration_entities('group')
                | select('in', groups)
                | list
                | count > 0
            }}
          sequence:
            - alias: "Remove groups"
              repeat:
                count: >
                  {{ 
                    integration_entities('group') 
                      | select('in', groups) 
                      | list 
                      | count
                  }}
                sequence:
                  - alias: "Remove resume_script_active"
                    service: group.remove
                    data:
                      object_id: >
                        {%- set existing = integration_entities('group')
                                            | select('in', groups)
                                            | list
                        %}
                        {{ states[existing[0]].object_id }}
